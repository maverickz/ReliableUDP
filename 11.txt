FileTransferApplication using UDP sockets
=========================================
This file contains :

1) List of files and a short description
2) Guide to use the makefile 
3) Steps to execute the application
4) Steps to verify the output
5) Future enhancements

1.List of files and a short description:
  --------------------------------------
a) 1.jpg 	  		- sample input file
b) ftpc.c  			- Client Program
c) ftps.c     		- Server Program (runs at port 9000)
d) tcpdc.c    		- TCPD at client (runs at port 1111)
e) tcpds.c   		- TCPDS at server (runs at port 7001)
f) timer.c			- Delta timer
g) troll     		- Troll
h) Makefile  		- Makefile for making files
i) OUTPUT_FILE.jpg 	- Output file written by server
j) t		  		- script to execute troll ( troll -t -x0 -s0 6001 -> troll runs at port 6001 )

2. Using Makefile:
  ----------------
a) Execute the following commands from the directory containing the above files
	make clean
	make
	ls
b) On successful build the following files are created
	ftps
	ftpc
	tcpdc
	tcpds
	timer
c) To delete the build use the following command
	make clean

3 Executing the Program:
  ----------------------
a) Move/distribute the build of client and server to the respective machines where the client and server is to be run
b) Go to the server machine and start the server using the following commands
	ftps <output_file_name> 
	tcpds <remote_host_name_of_tcpd_client> [Eg: tcpds kappa -> assuming tcpdc runs on 'kappa']
	ts
	
c) Go to the client machine and start the client by the following commands
	timer
	tcpdc <remote_host_name_of_tcpds> [ eg) tcpdc mu -> assuming tcpds runs on 'mu']
	tc  // starting troll using t script (troll always runs on port 6001)
	ftpc <file_name> [ eg) ftpc 1.jpg ] (Assuming the server runs on 'mu')

d) Now 1.jpg is transferred to the server

4 Verifying the output:
  ---------------------

a) To verify the output use the following commands (Assuming sent file and received file are in the same directory for comparison)
	diff sent_file_name received_file_name
		(or)
	cmp sent_file_name received_file_name
		(or)
	md5 sent_file_name received_file_name

Any differences in the files would manisfest itself in the output of any of these commands. When troll is configured to garble the packets the files would differ.
b) When troll is configured to garble the packets, packets that are garbled are identified through checksum verification and are reported to the file 
   'checksum_op.txt'
c) When troll is configured to induce a delay of say 10ms and 'TIMEOUT' value in timer.c is set to a value less than 2*delay, we can see packets getting 
   timed out and are reported to the file 'timerop.txt'

5 Future Enhancements:
  --------------------
a) Currently port numbers are hardcoded which could be mapped to run-time arguments

Note:
-----
Use the given port numbers as they are hardcoded
Change file permissions if necessary to execute the script file and the other executables (t script doesn't work on 'epsilon')
